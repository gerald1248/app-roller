#!/usr/bin/env bash

if [ -z "${APPS}" ] || [ -z "${THRESHOLD_HOURS}" ]; then
  echo "Set environment variables APPS and THRESHOLD_HOURS"
  echo "APPS takes form 'NAMESPACE:APPLABEL1 NAMESPACE:APPLABEL2'"
  echo "APPS='${APPS}' THRESHOLD_HOURS='${THRESHOLD_HOURS}'"
  exit 0
fi

cutoffSeconds=$(date -d"now -${THRESHOLD_HOURS} hours" "+%s")
for app in ${APPS}; do
  redeploy=""
  namespace=$(echo "${app}" | cut -d':' -f1)
  appLabel=$(echo "${app}" | cut -d':' -f2)

  if [ -z "${namespace}" ] || [ -z "${appLabel}" ]; then
    echo "Malformed item in APPS environment variable; must take form 'NAMESPACE:APPLABEL'"
    continue
  fi

  echo "Checking deployment ${appLabel} in namespace ${namespace}"
  
  creationTimestamps=$(kubectl get po -n="${namespace}" -l app="${appLabel}" -o jsonpath="{.items[*].metadata.creationTimestamp}")
  for creationTimestamp in ${creationTimestamps}; do
    creationSeconds=$(date -d"${creationTimestamp}" "+%s")
    if [ "${creationSeconds}" -lt "${cutoffSeconds}" ]; then
      redeploy="${redeploy}."
    fi
  done
  if [ ! -z "${redeploy}" ]; then
    echo "=> Pod(s) older than ${THRESHOLD_HOURS}h"
    echo "=> Trigger redeployment of ${appLabel}"
    # from k8s 1.15, call kubectl rollout restart
    if [ "${DRY_RUN}" = "true" ]; then
      echo "[Skipped as DRY_RUN set to true]"
    else
      kubectl patch deployment "${appLabel}" -n "${namespace}" -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"restarted\":\"$(date +%s)\"}}}}}" || true
    fi
  fi
done
